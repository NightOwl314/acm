/******************************************************************************/
/****         Generated by IBExpert 2005.12.04 13.06.2006 9:28:02          ****/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR GEN_CONTESTS;


SET TERM ^ ; 



/******************************************************************************/
/****                          Stored Procedures                           ****/
/******************************************************************************/

CREATE PROCEDURE ADD_CONTEST (
    CONTTYPE INTEGER,
    ISTEAM INTEGER,
    ISVIRTUAL INTEGER,
    START TIMESTAMP,
    STOP TIMESTAMP,
    DUR DOUBLE PRECISION,
    FREEZE DOUBLE PRECISION,
    SELFREG INTEGER,
    THEME INTEGER)
RETURNS (
    CONT_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_CONTEST_THEME (
    ROOT INTEGER)
RETURNS (
    THEME_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_STATUS (
    CONT_ID INTEGER,
    USER_ID INTEGER,
    PROB_ID INTEGER,
    COMP_ID INTEGER,
    RES_ID INTEGER)
RETURNS (
    STAT_ID INTEGER)
AS
BEGIN
  EXIT;
END^



SET TERM ; ^


/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE AUTHOR_SEC (
    ID_PUBL  INTEGER NOT NULL,
    SEC      INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE CONT_COMP (
    COMP_ID  INTEGER NOT NULL,
    CONT_ID  INTEGER NOT NULL
);

CREATE TABLE CONT_PARAM (
    CONT_ID   INTEGER NOT NULL,
    PARAM_ID  INTEGER NOT NULL,
    "VALUE"   CHAR(255)
);

CREATE TABLE CONT_PROB (
    CONT_ID  INTEGER NOT NULL,
    PROB_ID  INTEGER NOT NULL,
    PR_NUM   INTEGER NOT NULL
);

CREATE TABLE CONT_STATUS (
    ID_STAT  INTEGER NOT NULL,
    CONT_ID  INTEGER NOT NULL
);

CREATE TABLE CONTESTS (
    CONT_ID      INTEGER NOT NULL,
    START        TIMESTAMP NOT NULL,
    STOP         TIMESTAMP,
    DURATION     DOUBLE PRECISION NOT NULL,
    TYPE_ID      INTEGER NOT NULL,
    SELFREG      INTEGER default 1,
    FREEZE_TIME  DOUBLE PRECISION default 0 NOT NULL,
    IS_VIRTUAL   INTEGER DEFAULT 0 NOT NULL,
    IS_TEAM      INTEGER DEFAULT 0 NOT NULL,
    THEME        SMALLINT NOT NULL,
    STATUS       CHAR(1) DEFAULT 'A' NOT NULL
);

CREATE TABLE CONTNAMES (
    CONT_ID  INTEGER NOT NULL,
    LANG_ID  CHAR(2) NOT NULL,
    CN_NAME  CHAR(100)
);

CREATE TABLE CONTTYPES (
    TYPE_ID  INTEGER NOT NULL
);

CREATE TABLE PARAMS (
    PARAM_ID  INTEGER NOT NULL,
    TYPE_ID   INTEGER NOT NULL,
    COMMENT   INTEGER
);

CREATE TABLE REGAUTH (
    USER_ID   INTEGER NOT NULL,
    CONT_ID   INTEGER NOT NULL,
    REG_TIME  TIMESTAMP
);

CREATE TABLE TEAM_AUTH (
    AUTH_ID  INTEGER NOT NULL,
    TEAM_ID  INTEGER NOT NULL
);

CREATE TABLE TESTS (
    NUM      INTEGER NOT NULL,
    ID_STAT  INTEGER NOT NULL,
    ID_RSL   INTEGER
);

CREATE TABLE TYPENAMES (
    TYPE_ID  INTEGER NOT NULL,
    LANG_ID  CHAR(2) NOT NULL,
    TP_NAME  CHAR(100)
);



/******************************************************************************/
/****                                Views                                 ****/
/******************************************************************************/


/* View: CONTTYPES_EN */
CREATE VIEW CONTTYPES_EN(
    TYPE_ID,
    TP_NAME)
AS
select conttypes.type_id, typenames.tp_name
from conttypes tp left outer join typenames tn on tp.type_id=tn.type_id and tn.lang_id='en'
;



/* View: CONTTYPES_RU */
CREATE VIEW CONTTYPES_RU(
    TYPE_ID,
    TP_NAME)
AS
select conttypes.type_id, typenames.tp_name
from conttypes tp left outer join typenames tn on tp.type_id=tn.type_id and tn.lang_id='ru'
;



/* View: RESULTS_EN */
CREATE VIEW RESULTS_EN(
    RES_ID,
    RS_NAME)
AS
select results.id_rsl, results_lng.name
from results rs left outer join results_lng rsn on rs.id_rsl=rsn.id_rsl and rsn.id_lng='en'
;



/* View: RESULTS_RU */
CREATE VIEW RESULTS_RU(
    RES_ID,
    RS_NAME)
AS
select results.id_rsl, results_lng.name
from results rs left outer join results_lng rsn on rs.id_rsl=rsn.id_rsl and rsn.id_lng='ru'
;


INSERT INTO CONTTYPES (TYPE_ID) VALUES (1);

COMMIT WORK;

INSERT INTO TYPENAMES (TYPE_ID, LANG_ID, TP_NAME) VALUES (1, 'en', 'ACM                                                                                                 ');
INSERT INTO TYPENAMES (TYPE_ID, LANG_ID, TP_NAME) VALUES (1, 'ru', 'ACM                                                                                                 ');

COMMIT WORK;

INSERT INTO AUTHOR_SEC (ID_PUBL, SEC) VALUES (21916, 2);
INSERT INTO AUTHOR_SEC (ID_PUBL, SEC) VALUES (21917, 1);

COMMIT WORK;



/* Check constraints definition */

ALTER TABLE CONTESTS ADD check (freeze_time<=duration);
ALTER TABLE CONTESTS ADD check (selfreg=0 or selfreg=1);
ALTER TABLE CONTESTS ADD CHECK (IS_VIRTUAL=0 or IS_VIRTUAL=1);
ALTER TABLE CONTESTS ADD CHECK (IS_TEAM=0 or IS_TEAM=1);


/******************************************************************************/
/****                          Unique Constraints                          ****/
/******************************************************************************/

ALTER TABLE CONT_PROB ADD UNIQUE (CONT_ID, PR_NUM);


/******************************************************************************/
/****                             Primary Keys                             ****/
/******************************************************************************/

ALTER TABLE AUTHOR_SEC ADD CONSTRAINT PK_AUTHOR_SEC PRIMARY KEY (ID_PUBL);
ALTER TABLE CONTESTS ADD PRIMARY KEY (CONT_ID);
ALTER TABLE CONTNAMES ADD PRIMARY KEY (LANG_ID, CONT_ID);
ALTER TABLE CONTTYPES ADD PRIMARY KEY (TYPE_ID);
ALTER TABLE CONT_COMP ADD PRIMARY KEY (COMP_ID, CONT_ID);
ALTER TABLE CONT_PARAM ADD CONSTRAINT PK_CONT_PARAM PRIMARY KEY (CONT_ID, PARAM_ID);
ALTER TABLE CONT_PROB ADD PRIMARY KEY (PROB_ID, CONT_ID);
ALTER TABLE CONT_STATUS ADD CONSTRAINT PK_CONT_STATUS PRIMARY KEY (ID_STAT);
ALTER TABLE PARAMS ADD CONSTRAINT PK_PARAMS PRIMARY KEY (PARAM_ID);
ALTER TABLE REGAUTH ADD PRIMARY KEY (USER_ID, CONT_ID);
ALTER TABLE TEAM_AUTH ADD PRIMARY KEY (AUTH_ID, TEAM_ID);
ALTER TABLE TESTS ADD CONSTRAINT PK_TESTS PRIMARY KEY (NUM, ID_STAT);
ALTER TABLE TYPENAMES ADD CONSTRAINT PK_TYPENAMES PRIMARY KEY (TYPE_ID, LANG_ID);


/******************************************************************************/
/****                             Foreign Keys                             ****/
/******************************************************************************/

ALTER TABLE AUTHOR_SEC ADD CONSTRAINT FK_AUTHOR_SEC_1 FOREIGN KEY (ID_PUBL) REFERENCES AUTHORS (ID_PUBL) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CONTESTS ADD CONSTRAINT FK_CONTESTS_1 FOREIGN KEY (THEME) REFERENCES TEMA (ID_TM);
ALTER TABLE CONTESTS ADD FOREIGN KEY (TYPE_ID) REFERENCES CONTTYPES (TYPE_ID) ON DELETE SET NULL;
ALTER TABLE CONTNAMES ADD FOREIGN KEY (CONT_ID) REFERENCES CONTESTS (CONT_ID) ON DELETE CASCADE;
ALTER TABLE CONTNAMES ADD FOREIGN KEY (LANG_ID) REFERENCES LANGS (ID_LNG) ON DELETE CASCADE;
ALTER TABLE CONT_COMP ADD FOREIGN KEY (COMP_ID) REFERENCES COMPIL (ID_CMP) ON DELETE CASCADE;
ALTER TABLE CONT_COMP ADD FOREIGN KEY (CONT_ID) REFERENCES CONTESTS (CONT_ID) ON DELETE CASCADE;
ALTER TABLE CONT_PARAM ADD CONSTRAINT FK_CONT_PARAM_1 FOREIGN KEY (CONT_ID) REFERENCES CONTESTS (CONT_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CONT_PARAM ADD CONSTRAINT FK_CONT_PARAM_2 FOREIGN KEY (PARAM_ID) REFERENCES PARAMS (PARAM_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CONT_PROB ADD FOREIGN KEY (CONT_ID) REFERENCES CONTESTS (CONT_ID) ON DELETE CASCADE;
ALTER TABLE CONT_PROB ADD FOREIGN KEY (PROB_ID) REFERENCES PROBLEMS (ID_PRB) ON DELETE CASCADE;
ALTER TABLE CONT_STATUS ADD CONSTRAINT FK_CONT_STATUS_1 FOREIGN KEY (ID_STAT) REFERENCES STATUS (ID_STAT) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CONT_STATUS ADD CONSTRAINT FK_CONT_STATUS_2 FOREIGN KEY (CONT_ID) REFERENCES CONTESTS (CONT_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARAMS ADD CONSTRAINT FK_PARAMS_1 FOREIGN KEY (TYPE_ID) REFERENCES CONTTYPES (TYPE_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE REGAUTH ADD FOREIGN KEY (USER_ID) REFERENCES AUTHORS (ID_PUBL) ON DELETE CASCADE;
ALTER TABLE REGAUTH ADD FOREIGN KEY (CONT_ID) REFERENCES CONTESTS (CONT_ID) ON DELETE CASCADE;
ALTER TABLE TEAM_AUTH ADD FOREIGN KEY (AUTH_ID) REFERENCES AUTHORS (ID_PUBL) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TEAM_AUTH ADD FOREIGN KEY (TEAM_ID) REFERENCES AUTHORS (ID_PUBL) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TESTS ADD CONSTRAINT FK_TESTS_1 FOREIGN KEY (ID_STAT) REFERENCES STATUS (ID_STAT) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TESTS ADD CONSTRAINT FK_TESTS_2 FOREIGN KEY (ID_RSL) REFERENCES RESULTS (ID_RSL);
ALTER TABLE TYPENAMES ADD FOREIGN KEY (LANG_ID) REFERENCES LANGS (ID_LNG) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TYPENAMES ADD FOREIGN KEY (TYPE_ID) REFERENCES CONTTYPES (TYPE_ID) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/


SET TERM ^ ;


/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: AUTOGEN_CONTESTS */
CREATE TRIGGER AUTOGEN_CONTESTS FOR CONTESTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  new.cont_id = gen_id(gen_Contests, 1);
end
^

SET TERM ; ^



/******************************************************************************/
/****                          Stored Procedures                           ****/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE ADD_CONTEST (
    CONTTYPE INTEGER,
    ISTEAM INTEGER,
    ISVIRTUAL INTEGER,
    START TIMESTAMP,
    STOP TIMESTAMP,
    DUR DOUBLE PRECISION,
    FREEZE DOUBLE PRECISION,
    SELFREG INTEGER,
    THEME INTEGER)
RETURNS (
    CONT_ID INTEGER)
AS
begin
  insert
    into Contests(type_id,start,stop,duration,freeze_time,selfreg,is_virtual,is_team,theme)
    values (:conttype,:start,:stop,:dur,:freeze,:selfreg,:isvirtual,:isteam,:theme);
  cont_id=gen_id(gen_contests,0);
  suspend;
end
^

ALTER PROCEDURE ADD_CONTEST_THEME (
    ROOT INTEGER)
RETURNS (
    THEME_ID INTEGER)
AS
begin
  select max(id_tm)+1 from tema into :theme_id;
  insert into tema (id_tm,small_root) values (:theme_id,:root);
  suspend;
end
^

ALTER PROCEDURE ADD_STATUS (
    CONT_ID INTEGER,
    USER_ID INTEGER,
    PROB_ID INTEGER,
    COMP_ID INTEGER,
    RES_ID INTEGER)
RETURNS (
    STAT_ID INTEGER)
AS
begin
  insert into Status(id_publ, id_prb, id_cmp, id_rsl, dt_tm)
    values(:user_id, :prob_id, :comp_id, :res_id, current_timestamp);
  stat_id=gen_id(status_gen,0);
  insert into Cont_Status(id_stat, cont_id) values (:stat_id,:cont_id);
  suspend;
end
^


SET TERM ; ^


/******************************************************************************/
/****                             Descriptions                             ****/
/******************************************************************************/

DESCRIBE PROCEDURE ADD_CONTEST
'Add a new contest to DB';

DESCRIBE PROCEDURE ADD_STATUS
'Add a new submition to DB (table Status)';



/* Parameters descriptions */

DESCRIBE PARAMETER CONTTYPE PROCEDURE ADD_CONTEST
'Contest type';

DESCRIBE PARAMETER CONT_ID PROCEDURE ADD_CONTEST
'Returns ID of an added contest';

DESCRIBE PARAMETER DUR PROCEDURE ADD_CONTEST
'Duration';

DESCRIBE PARAMETER FREEZE PROCEDURE ADD_CONTEST
'Freeze time';

DESCRIBE PARAMETER ISTEAM PROCEDURE ADD_CONTEST
'Team (1) or Individual (0) contest';

DESCRIBE PARAMETER ISVIRTUAL PROCEDURE ADD_CONTEST
'Virtual (1) or not(0) contest';

DESCRIBE PARAMETER SELFREG PROCEDURE ADD_CONTEST
'Allow (1) or not allow(0) selfregistration';

DESCRIBE PARAMETER START PROCEDURE ADD_CONTEST
'Start time';

DESCRIBE PARAMETER STOP PROCEDURE ADD_CONTEST
'End time';

DESCRIBE PARAMETER COMP_ID PROCEDURE ADD_STATUS
'Compiler ID';

DESCRIBE PARAMETER CONT_ID PROCEDURE ADD_STATUS
'Contest ID';

DESCRIBE PARAMETER PROB_ID PROCEDURE ADD_STATUS
'Problem ID';

DESCRIBE PARAMETER RES_ID PROCEDURE ADD_STATUS
'Result ID';

DESCRIBE PARAMETER STAT_ID PROCEDURE ADD_STATUS
'Returns ID of an added submition';

DESCRIBE PARAMETER USER_ID PROCEDURE ADD_STATUS
'User ID';

