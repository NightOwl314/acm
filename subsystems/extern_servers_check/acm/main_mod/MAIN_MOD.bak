//---------------------------------------------------------------------------
#include <windows.h>
#include <fstream.h>
#include <cstring.h>
#include <stdio.h>
#include <iomanip>
#include "db_func.h"
#include "testing.h"
#include "main_mod.h"
#include "..\common_cpp\result_id.h"
#include "..\common_cpp\swap_message.h"


TPaths pt; //файлы (с полными путями) необходимые при проверке задачи
ofstream logf; //лог файл
TDataBase DB;  //работа с БД
TConfig *master_cfg; //параметры работы сервера из cfg-файлов

//проверяет все задачи из БД, которая может пополнятся в процессе проверки
void WhileTestSolve(void)
{
   TSubmited elm;
   unsigned int n,tm,mm,tm1,mm1;
   int r,bl=0,msg,err,again_plagiat;
   char query_str[150],filename[MAX_PATH],filename_snd[MAX_PATH],s[20],ts[50];
   char compil_scr[MAX_PATH],compil_prm[100],obj_data_null[50],warn_rsl_s[50];
   char otchfile[MAX_PATH],exe_file[MAX_PATH],obj_file[MAX_PATH];
   TCompiler *compil;
   ofstream otchet;
   SHELLEXECUTEINFO se;
   void *snapshot;
   DWORD tm0;
   SYSTEMTIME sys_tm;

   while(true) {

      if (bl) {
         DB.FinishTesting();
      }

      snapshot=DB.start_trans(1);
      bl=DB.SelectDataSubmit(&elm,snapshot);
      if (bl==0) {
         DB.rollback_trans(snapshot);
         msg=DB.wait_events();

         GetSystemTime(&sys_tm);
         sprintf(ts,"%02d:%02d:%02d.%03d",sys_tm.wHour,sys_tm.wMinute,sys_tm.wSecond,sys_tm.wMilliseconds);
         logf << ts << " [СЕРВЕР "<<DB.get_id() <<"] Есть непроверенные решения"<< endl;

         if ( !msg || (msg & EVN_STOP_SRV)>0 ) break;
         continue;
      }

      tm0=GetTickCount();
      //logf << "TESTING[ "<<DB.get_id() <<" ]   id_stat=" << elm.id_stat << endl;
      GetSystemTime(&sys_tm);
      sprintf(ts,"%02d:%02d:%02d.%03d",sys_tm.wHour,sys_tm.wMinute,sys_tm.wSecond,sys_tm.wMilliseconds);
      logf << ts << " [СЕРВЕР "<<DB.get_id() <<"] Начало проверки решения " << elm.id_stat << endl;

      DB.StartTesting();

      compil=master_cfg->CompilerId(elm.id_cmp);

      //определим имя файла в папке присланных решений
      sprintf(filename_snd,"%s%s",master_cfg->GlobalPaths->DirTempSrc,compil->FileIn);
      //определим имя файла в папке компиляции и проверки решений
      sprintf(filename,"%s%s",master_cfg->GlobalPaths->DirTemp,compil->FileIn);

      itoa(elm.id_stat,s,16); //hex
      StrReplace(filename_snd,REPLACE_ID,s);
      StrReplace(filename,REPLACE_ID,s);
      sprintf(otchfile,"%s%s.otch",master_cfg->GlobalPaths->DirSrcArhive,s);

      //удалим запись в БД, если проверять нечего
      if (!FileExists(filename_snd)) {
         logf << "file not found " << filename << endl;
         sprintf(query_str,"delete from status where id_stat=%d",elm.id_stat);
         DB.SqlExecute(query_str,snapshot);
         DB.commit_trans(snapshot);
         continue;
      }

      //копируем исходник в каталог компиляции
      CopyFile(filename_snd,filename,FALSE);

      //здесь компилируем исходник
      if (!DB.UpdateStatus(elm.id_stat,RS_COMPILING,&snapshot))
         continue;
      strcpy(compil_scr,compil->CompilScript);
      strcpy(compil_prm,compil->CompilParam);
      StrReplace(compil_prm,REPLACE_ID,s);

      otchet.open(otchfile,ios::out);
      otchet << "<pre><h3>COMPILING...</h3><strong>RUN:</strong>"
             << compil_scr << " " << compil_prm <<"\n"
             << "<strong>COMPILER OUTPUT:</strong>\n";
      otchet.close();
      strcpy(query_str,compil_prm);

      sprintf(pt.dir_temp,"%s%d\\",master_cfg->GlobalPaths->DirTemp,DB.get_id());
      CreateDirectory(pt.dir_temp,NULL);

      sprintf(pt.compil_outF,"%scompil.out",pt.dir_temp);

      sprintf(compil_prm,"%s >\"%s\"",query_str,pt.compil_outF);
      memset(&se,0,sizeof(SHELLEXECUTEINFO));
      se.cbSize = sizeof(SHELLEXECUTEINFO);
      se.hwnd = NULL;
      se.lpVerb = NULL;//"open";
      se.lpFile = compil_scr;
      se.lpParameters =compil_prm;
      se.lpDirectory = master_cfg->GlobalPaths->DirTemp;
      se.fMask = SEE_MASK_NOCLOSEPROCESS;
      if(ShellExecuteEx(&se))
      {
         WaitForSingleObject(se.hProcess, INFINITE);
         CloseHandle(se.hProcess);
      }
      AddFileInOtchet(otchfile,pt.compil_outF);

      //проверим наличие выходного файла
      sprintf(exe_file,"%s%s",master_cfg->GlobalPaths->DirTemp,compil->FileOut);
      StrReplace(exe_file,REPLACE_ID,s);
      sprintf(obj_file,"%s%s",master_cfg->GlobalPaths->DirTemp,compil->FileObj);
      StrReplace(obj_file,REPLACE_ID,s);
      if (!FileExists(exe_file)) {
         otchet.open(otchfile,ios::out|ios::app);
         otchet << "<strong>ERROR</strong>\n";
         otchet.close();

         r=RS_COMPILATION_ERROR;
         sprintf(query_str,"update status set id_rsl=%d, obj_data=null where id_stat=%d",
            r,elm.id_stat);

      } else {

         otchet.open(otchfile,ios::out|ios::app);
         otchet << "<strong>OK</strong>\n\n<h3>RUNNING...</h3>";
         otchet.close();

         //проверяем решение
         if (!DB.UpdateStatus(elm.id_stat,RS_RUNING,&snapshot))
            continue;

         sprintf(pt.DirTests,"%s%d\\%s",master_cfg->GlobalPaths->DirProblems,elm.id_prb,
            master_cfg->ProblemPaths->Tests);
         strcpy(pt.FileTest, compil->RunCmd);
         StrReplace(pt.FileTest,REPLACE_ID,s);
         StrReplace(pt.FileTest,"$(path)",master_cfg->GlobalPaths->DirTemp);

         sprintf(pt.WAProg,"%s%d\\%s",master_cfg->GlobalPaths->DirProblems,elm.id_prb,
             master_cfg->ProblemPaths->WrongAnswerPrg);
         sprintf(pt.ListTests,"%s%d\\%s",master_cfg->GlobalPaths->DirProblems,elm.id_prb,
             master_cfg->ProblemPaths->ListTests);
         strcpy(pt.WLFile,compil->WhiteListFile);
         pt.protect=compil->ProtectMode;
         strcpy(pt.otchetF,otchfile);
         pt.debug_protect=elm.debug_protect;
         pt.id_uniq=DB.get_id();

         otchet.open(otchfile,ios::out|ios::app);
         otchet << "<strong>RUN:</strong> " << pt.FileTest << "\n"
                << "<strong>LIST OF TESTS:</strong> " << pt.ListTests << "\n"
                << "<strong>CHECKER:</strong> " << pt.WAProg << "\n";
         otchet.close();

         //применим поправки памяти и времени
         elm.time+=compil->AdjTime;
         elm.mem+=compil->AdjMemory;
         tm=elm.time;
         mm=elm.mem;
         r=TestSolve(&pt,&elm.time,&elm.mem,&n,elm.id_cmp);

         elm.time-=compil->AdjTime;
         elm.mem-=compil->AdjMemory;

         if (r==RS_ACCEPTED) {
            if (elm.warn_rsl!=RS_ACCEPTED) {
               //проверка на плагиат
               if (FileExists(obj_file) &&
                !DB.TestPlagiat(elm.id_stat,obj_file,
                   elm.min_uniq_proc,pt.plagiat_text,&again_plagiat,snapshot)) {
                  if (elm.warn_rsl==RS_UNIQUE_ERROR || again_plagiat)
                     r=RS_UNIQUE_ERROR;
                  else
                     elm.warn_rsl=RS_UNIQUE_ERROR; //подозрение на плагиат

                  otchet.open(otchfile,ios::out|ios::app);
                  otchet << "<strong>ANALISING PLAGIAT (not unique):</strong>\n"
                         << pt.plagiat_text << "\n";
                  otchet.close();
               }
            }
         } else {
             elm.warn_rsl=-1; //NULL
         }

         if (r==RS_ACCEPTED) {
            int old_user,id_slv;

            //сохраним объектный файл
            if (FileExists(obj_file))
               DB.SaveObjFile(elm.id_stat,obj_file,snapshot);
            strcpy(obj_data_null,"");

            //а вдруг это решение лучше прежнего
            if (DB.TestingBestSolve(&elm,&old_user,&id_slv,snapshot)) {
               otchet.open(otchfile,ios::out|ios::app);
               otchet << "<strong>this best solve</strong>\n";
               otchet.close();

               //проверим еще 2 раза, для получения лучшего времени
               for (int i=0;i<2;i++) {
                  tm1=tm;
                  mm1=mm;
                  TestSolve(&pt,&tm1,&mm1,&n,elm.id_cmp);
                  tm1-=compil->AdjTime;
                  mm1-=compil->AdjMemory;
                  if (tm1<elm.time) elm.time=tm1;
                  if (mm1<elm.mem) elm.mem=mm1;
               }
               //считаем текст решения в память
               ifstream inpsrc(filename,ios::binary);
               inpsrc.seekg(0,ios::end);
               int sz=inpsrc.tellg();
               char *buff = new char[sz];
               inpsrc.seekg(0,ios::beg);
               inpsrc.read(buff,sz);
               inpsrc.close();

               //обновим лучшее решение
               sprintf(query_str,"update problems set id_prb=id_prb+0 where id_prb=%d",elm.id_prb);
               while (DB.SqlExecute(query_str,snapshot)==-1)
                  Sleep(10);
               if (DB.TestingBestSolve(&elm,&old_user,&id_slv,snapshot)) {
                  DB.UpdateBestSolve(&elm,buff,sz,old_user,id_slv,snapshot);
               }
               delete[] buff;
            }
         } else {
            strcpy(obj_data_null,",obj_data=null");
         }

         if (elm.warn_rsl==-1) {
            strcpy(warn_rsl_s,",warn_rsl=NULL ");
         } else {
            sprintf(warn_rsl_s,",warn_rsl=%d ",elm.warn_rsl);
         }

         //заносим результат в базу
         if (n==0) {
            sprintf(query_str,"update status set id_rsl=%d, "
               "time_work=%f,mem_use=%d %s %s where id_stat=%d",
               r,(float)elm.time/1000.0,elm.mem,obj_data_null,warn_rsl_s,elm.id_stat);

            otchet.open(otchfile,ios::out|ios::app);
            otchet << "<strong>OK</strong>\n";
            otchet.close();
         } else {
            sprintf(query_str,"update status set id_rsl=%d, test_no=%d, "
               "time_work=%f,mem_use=%d %s %s where id_stat=%d",
               r,n,(float)elm.time/1000.0,elm.mem,obj_data_null,warn_rsl_s,elm.id_stat);
         }

         DeleteFile(exe_file);
      }

      DB.SaveReports(elm.id_stat,elm.warn_rsl==-1?r:elm.warn_rsl,&pt,snapshot);

      logf.setf(ios::fixed);
      logf.precision(3);

      logf << "SAVE_RSL0[ "<<DB.get_id() << " ] " << (double)((GetTickCount()-tm0)/1000.0) << endl;
      tm0=GetTickCount();

      //из-за пересчета статистики в триггере, может возникнуть DEADLOCK
      do {
         err=DB.SqlExecute(query_str,snapshot);
      } while(err==-1);

      logf << "SAVE_RSL1[ "<<DB.get_id() << " ] " << (double)((GetTickCount()-tm0)/1000.0) << endl;
      tm0=GetTickCount();

      logf << "COMMIT_RSL[ "<<DB.get_id() << " ] " << (double)((GetTickCount()-tm0)/1000.0) << endl;
      DB.commit_trans(snapshot);


      //почистим за собой
      otchet.open(otchfile,ios::out|ios::app);
      otchet << "</pre>\n";
      otchet.close();
      sprintf(otchfile,"%s%s.src",master_cfg->GlobalPaths->DirSrcArhive,s);
      CopyFile(filename,otchfile,FALSE);
      DeleteFile(filename);
      DeleteFile(filename_snd);
      DeleteFile(obj_file);
      DelOldSrc(elm.id_stat);
      pt.del_temp_files(1);
      RemoveDirectory(pt.dir_temp);
   }

}

//замена всех вхождений подстроки str_find в строку str_src на строку str_new
void StrReplace(char *str_src, char *str_find, char *str_new)
{
   int pos;
   string src,fnd(str_find),nw(str_new),bf;

   while(1) {
      src=string(str_src);
      pos=src.find(fnd);
      if (pos==-1) break;
      bf=src.substr(0,pos)+nw+src.substr(pos+fnd.length());
      strcpy(str_src,bf.c_str());
   }
}

//основная функция, точка входа
int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR CmdLine, int nCmdShow)
{
   char fl_cfg[MAX_PATH],s[MAX_PATH];
   ifstream inp;
   int n_cpu,i;

   //определим путь к файлу конфигурации
   inp.open("config_file.path");
   if (!inp) {
      err("error config_file.path not found");
      return 1;
   }
   inp >> fl_cfg;
   inp.close();

   //читаем параметры
   master_cfg= new TConfig;
   master_cfg->Read(fl_cfg);

   //создаем лог
   logf.open(master_cfg->GlobalPaths->LogFile,ios::out | ios::app);

   //привязка к процессору указанному в командной строке, например -cpu3
   if (strncmp(CmdLine,"-cpu",4)==0) {
      strcpy(s,CmdLine+4);
      i=0;
      while (isdigit(s[i])) i++;
      s[i]=0;
      n_cpu=atoi(s);
      i=SetProcessAffinityMask(GetCurrentProcess(),(DWORD)1<<(n_cpu-1));
      logf << "Associate CPU" << n_cpu << "...  "
           << (i?"successful":"failed")  << endl;
   }

   //файл dll-библиотеки защиты
   strcpy(pt.dllF,master_cfg->GlobalPaths->Test_protectDll);

   //соединение с БД
   if (DB.Connect(master_cfg->DataBase->dbname, master_cfg->DataBase->user,
       master_cfg->DataBase->password)) {
      err("No connect DB");
      return 1;
   }

   //циклическая (через ожидание событий от БД) проверка поступающих решений
   WhileTestSolve();

   DB.Disconnect();
   logf.close();
   delete master_cfg;
   return 0;
}  //конец WinMain

